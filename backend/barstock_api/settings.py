"""
Django settings for barstock_api project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""


from pathlib import Path
import os
from decouple import config, Csv
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-37q@b!nh7s8^e719j_@9)4v%_%l%j#j0f@xol(ytm#fw4*w^mx')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost,127.0.0.1', cast=Csv())


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third party apps
    'rest_framework',
    'rest_framework_simplejwt',
    'corsheaders',
    'django_filters',
    # 'channels',  # Désactivé pour Render (plan gratuit)

    # Local apps
    'accounts',
    'analytics',
    'products',
    'settings',
    'inventory',
    'sales',
    'orders',
    'suppliers',
    'expenses',
    'reports',
    'kitchen',
    'alerts',
    'monitoring',
    'help',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'barstock_api.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'barstock_api.wsgi.application'

# ASGI (pour WebSockets)
ASGI_APPLICATION = 'barstock_api.asgi.application'

# Configuration Channels
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels.layers.InMemoryChannelLayer',
    },
}


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Configuration de la base de données
# Utilise PostgreSQL
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': config('DB_NAME', default='barstock_db'),
        'USER': config('DB_USER', default='barstock_user'),
        'PASSWORD': config('DB_PASSWORD', default='barstock123'),
        'HOST': config('DB_HOST', default='localhost'),
        'PORT': config('DB_PORT', default='5432'),
        'CONN_MAX_AGE': 600,
    }
}

# Custom User Model
AUTH_USER_MODEL = 'accounts.User'


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Django REST Framework Configuration
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
}

# JWT Configuration
from datetime import timedelta
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=24),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
}

# CORS settings - Configuration pour développement et production
CORS_ALLOW_CREDENTIALS = True  # Permet l'envoi de cookies et credentials

# En production, utiliser la liste spécifique
if DEBUG:
    CORS_ALLOW_ALL_ORIGINS = True  # Autorise toutes les origines en développement
else:
    CORS_ALLOW_ALL_ORIGINS = False

CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",
    "http://127.0.0.1:5173", 
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "https://barstock-web.onrender.com",  # Production frontend
    
]

# Configuration alternative plus restrictive (commentée)
# CORS_ALLOWED_ORIGINS = [
#     "http://localhost:5173",  # Vite dev server
#     "http://127.0.0.1:5173",  # Vite dev server
#     "http://192.168.43.253:5173",  # Network access
# ]

# Headers CORS autorisés - Configuration complète
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'cache-control',
    'pragma',
    'expires',
    'if-modified-since',
    'if-none-match',
    'x-forwarded-for',
    'x-forwarded-proto',
    'x-real-ip',
]

# Configuration CORS complète
CORS_PREFLIGHT_MAX_AGE = 86400
CORS_EXPOSE_HEADERS = [
    'content-length',
    'content-type',
    'cache-control',
    'expires',
    'last-modified',
]

# Méthodes CORS autorisées
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

# Internationalization for Burundi
LANGUAGE_CODE = 'fr-fr'
TIME_ZONE = 'Africa/Bujumbura'
USE_I18N = True
USE_TZ = True

# ===== WEBSOCKETS CONFIGURATION =====
# Note: ASGI_APPLICATION déjà défini ligne 99
# Utilise InMemoryChannelLayer pour Render (plan gratuit sans Redis)

# ===== EMAIL CONFIGURATION =====
# Configuration pour l'envoi d'emails
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'  # Ou votre serveur SMTP
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'your-email@gmail.com'  # À configurer
EMAIL_HOST_PASSWORD = 'your-app-password'  # À configurer
DEFAULT_FROM_EMAIL = 'BarStockWise <noreply@barstockwise.com>'

# ===== SMS CONFIGURATION =====
# Choisir le provider SMS : 'twilio', 'africastalking', 'custom'
SMS_PROVIDER = 'africastalking'  # Recommandé pour l'Afrique

# Configuration Twilio (si utilisé)
TWILIO_ACCOUNT_SID = 'your-twilio-account-sid'
TWILIO_AUTH_TOKEN = 'your-twilio-auth-token'
TWILIO_PHONE_NUMBER = '+1234567890'

# Configuration Africa's Talking (recommandé pour l'Afrique)
AFRICASTALKING_USERNAME = 'your-username'  # Votre username Africa's Talking
AFRICASTALKING_API_KEY = 'your-api-key'    # Votre API key

# Configuration SMS personnalisée (pour provider local)
CUSTOM_SMS_API_URL = 'https://your-local-sms-provider.com/api/send'
CUSTOM_SMS_API_KEY = 'your-api-key'

# ===== RESTAURANT CONFIGURATION =====
RESTAURANT_NAME = "Harry's Grill"
RESTAURANT_PHONE = '+257 62 12 45 10 /79 932 322'  # À configurer avec votre numéro
RESTAURANT_ADDRESS = 'Votre adresse complète, Bujumbura, Burundi'

# Numéros de téléphone du personnel pour les notifications
STAFF_PHONE_NUMBERS = [
    '+257 62 12 45 10 /79 932 322',  # Manager
    '+257 62 12 45 10 /79 932 322',  # Chef de service
    # Ajouter d'autres numéros selon besoin
]
# ===== CELERY CONFIGURATION (pour les tâches automatiques) =====
# Désactivé pour Render (plan gratuit) - Nécessite Redis
# Configuration Redis pour Celery
# CELERY_BROKER_URL = 'redis://localhost:6379/0'
# CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'
# CELERY_ACCEPT_CONTENT = ['json']
# CELERY_TASK_SERIALIZER = 'json'
# CELERY_RESULT_SERIALIZER = 'json'
# CELERY_TIMEZONE = TIME_ZONE

# Tâches périodiques
# from celery.schedules import crontab
# CELERY_BEAT_SCHEDULE = {
#     'send-reservation-reminders': {
#         'task': 'core.notifications.send_reservation_reminders',
#         'schedule': crontab(minute='*/15'),  # Toutes les 15 minutes
#     },
#     'check-overdue-reservations': {
#         'task': 'core.notifications.check_overdue_reservations',
#         'schedule': crontab(minute='*/30'),  # Toutes les 30 minutes
#     },
# }

# Configuration Redis pour WebSockets et Cache
# Désactivé pour Render (plan gratuit) - Utilise InMemoryChannelLayer à la place
# CHANNEL_LAYERS = {
#     'default': {
#         'BACKEND': 'channels_redis.core.RedisChannelLayer',
#         'CONFIG': {
#             "hosts": [('127.0.0.1', 6379)],
#         },
#     },
# }

# Configuration Cache Redis
# Désactivé pour Render (plan gratuit) - Utilise le cache par défaut
# CACHES = {
#     'default': {
#         'BACKEND': 'django_redis.cache.RedisCache',
#         'LOCATION': 'redis://127.0.0.1:6379/1',
#         'OPTIONS': {
#             'CLIENT_CLASS': 'django_redis.client.DefaultClient',
#         }
#     }
# }

# Configuration Celery avec Redis
# Désactivé pour Render (plan gratuit)
# CELERY_BROKER_URL = 'redis://127.0.0.1:6379/0'
# CELERY_RESULT_BACKEND = 'redis://127.0.0.1:6379/0'
# CELERY_ACCEPT_CONTENT = ['json']
# CELERY_TASK_SERIALIZER = 'json'
# CELERY_RESULT_SERIALIZER = 'json'
# CELERY_TIMEZONE = 'Africa/Bujumbura'

# ==========================================
# CONFIGURATION PRODUCTION RENDER
# ==========================================

# Détection de l'environnement Render
IS_RENDER = os.environ.get('RENDER', False)

# Configuration de la base de données pour Render
if IS_RENDER or os.environ.get('DATABASE_URL'):
    # Utiliser la DATABASE_URL fournie par Render PostgreSQL
    import dj_database_url
    DATABASES['default'] = dj_database_url.config(
        default=os.environ.get('DATABASE_URL'),
        conn_max_age=600,
        conn_health_checks=True,
    )
    print("✅ Configuration PostgreSQL Render activée")

# Configuration CORS pour production
if not DEBUG:
    CORS_ALLOW_ALL_ORIGINS = False
    CORS_ALLOWED_ORIGINS = config(
        'CORS_ALLOWED_ORIGINS',
        default='https://barstock-web.onrender.com',
        cast=Csv()
    )
    print(f"✅ CORS configuré pour production: {CORS_ALLOWED_ORIGINS}")

# Configuration WhiteNoise pour les fichiers statiques
if 'whitenoise.middleware.WhiteNoiseMiddleware' not in MIDDLEWARE:
    MIDDLEWARE.insert(1, 'whitenoise.middleware.WhiteNoiseMiddleware')

STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Sécurité en production
if not DEBUG:
    # HTTPS
    SECURE_SSL_REDIRECT = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    
    # Cookies sécurisés
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    
    # Sécurité des headers
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = 'DENY'
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    
    print("✅ Paramètres de sécurité production activés")

# Configuration des logs pour Render
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
            'propagate': False,
        },
    },
}

# Configuration du cache (en mémoire pour plan gratuit Render)
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'barstock-cache',
    }
}

# Configuration des sessions
SESSION_ENGINE = 'django.contrib.sessions.backends.db'
SESSION_COOKIE_AGE = 1209600  # 2 semaines
SESSION_SAVE_EVERY_REQUEST = False

# Allowed hosts en production
if not DEBUG:
    ALLOWED_HOSTS = config(
        'ALLOWED_HOSTS',
        default='.onrender.com',
        cast=Csv()
    )

# Affichage de la configuration au démarrage
# Commenté temporairement pour éviter les problèmes d'encodage sur Windows
# print(f"""
# {'='*50}
# BarStockWise API Configuration
# {'='*50}
# DEBUG: {DEBUG}
# DATABASE: {DATABASES['default']['NAME']}
# ALLOWED_HOSTS: {ALLOWED_HOSTS}
# STATIC_ROOT: {STATIC_ROOT}
# MEDIA_ROOT: {MEDIA_ROOT}
# {'='*50}
# """)